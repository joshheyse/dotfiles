#! /usr/bin/env zsh

typeset -U PATH path

if [ "$(uname -o)" = "Darwin" ]; then
  export IS_MACOS=true

  if [ -d "$HOME/.hombrew" ]; then
    eval "$("$HOME/.hombrew/bin/brew" shellenv)"
  elif [ -d "/opt/homebrew" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi
fi

if type brew &>/dev/null; then
  HOMEBREW_PREFIX="$(brew --prefix)"
  fpath+="$HOMEBREW_PREFIX/share/zsh/site-functions"

  LLVMBIN="$HOMEBREW_PREFIX/opt/llvm/bin"
  if [[ -d "$LLVMBIN" ]]; then
    export path=("$LLVMBIN" $path)
  else
    echo "$LLVMBIN not found, install using homebrew install llvm"
  fi

  GNUBIN="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin"
  if [[ -d "$GNUBIN" ]]; then
    export path=("$GNUBIN" $path)
  else
    echo "$GNUBIN not found, install using homebrew install coreutils"
  fi

  BINUTILSBIN="$HOMEBREW_PREFIX/opt/binutils/bin"
  if [[ -d "$BINUTILSBIN" ]]; then
    export path=("$BINUTILSBIN" $path)
  else
    echo "$BINUTILSBIN not found, install using homebrew install binutils"
  fi

  DOTNET="$HOMEBREW_PREFIX/opt/dotnet"
  if [[ -d "$DOTNET" ]]; then
    export DOTNET_ROOT="$DOTNET/libexec"
  fi

fi

__conda_prefix="$HOME/.conda"
__conda_setup="$("$__conda_prefix/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$__conda_prefix/etc/profile.d/conda.sh" ]; then
        . "$__conda_prefix/etc/profile.d/conda.sh"
    else
        export PATH="$__conda_prefix/bin:$PATH"
    fi
fi
unset __conda_setup

LOCAL_TERM_INFOS="$HOME/.local/share/terminfo"
if [ -d $LOCAL_TERM_INFOS ]; then
  export TERMINFO_DIRS="$TERMINFO_DIRS:$LOCAL_TERM_INFOS"
fi
unset LOCAL_TERM_INFOS

if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  source "$(code --locate-shell-integration-path zsh)"
fi

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

export path=("$HOME/.local/bin" $path)
export path=("$HOME/.cargo/bin" $path)

ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -d $ZINIT_HOME ]]; then
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi
source "${ZINIT_HOME}/zinit.zsh"


# misc
setopt interactive_comments long_list_jobs extendedglob notify list_packed transient_rprompt

# word movement should stop on slashes
export WORDCHARS=$WORDCHARS:s:/:
###############################################################################
# directory navigation options
###############################################################################
setopt auto_cd auto_pushd pushd_ignore_dups glob_complete numeric_glob_sort
export DIRSTACKSIZE=10

export TIME_STYLE=long-iso

###############################################################################
# history
###############################################################################
# replace histignorealldups with histsavenodups to make zsh autosuggestion option match_prev_cmd work
setopt correct hist_save_no_dups inc_append_history extended_history hist_ignore_space hist_reduce_blanks hist_verify hist_fcntl_lock

export HISTFILE=~/.zsh_history
export SAVEHIST=$HISTSIZE

###############################################################################
# dynamic aliases
###############################################################################
if [ -x "$(command -v grc)" ]; then
  # colorize standard commands. Possibilities here /opt/homebrew/share/grc
  # don't add
  # * netstat - waits for command to finish
  # * ifconfig - completion breaks
  # * ps - completion buggy
  # some problems
  # * diff - crashes sometimes
  # * env - if given utility parameter, it modifies output formatting
  for a in df diff dig du env id last lsof traceroute ulimit uptime whois
  do
    # function rather than alias is needed to preserve completions
    $a() {
      # could forcing color be dangerous for some pipes? It is needed for less
      grc --colour=on $0 "$@"
    }
  done
fi

###############################################################################
# completion
###############################################################################
setopt nolistbeep # could be nobeep, but that will create cases where there is no repsone at all to a <tab>
# Do menu-driven completion.
zstyle ':completion:*' menu select

# formatting and messages
# http://www.masterzen.fr/2009/04/19/in-love-with-zsh-part-one/
zstyle ':completion:*' extra-verbose yes
# describe different versions of completion. Test with: cd<tab>
zstyle ':completion:*:descriptions' format "%F{yellow}--- %d%f"
zstyle ':completion:*:messages' format '%d'
# when no match exists. Test with: cd fdjsakl<tab>
zstyle ':completion:*:warnings' format "%F{red}No matches for:%f %d"
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
# groups matches. Test with cd<tab>
zstyle ':completion:*' group-name ''
# this will only show up if a parameter flag has a name but no description
zstyle ':completion:*' auto-description 'specify: %d'
# this should make completion for some commands faster, haven't noticed though. saves in .zcompcache
zstyle ':completion::complete:*' use-cache 1

zinit blockf atpull'zinit creinstall -q .' for zsh-users/zsh-completions

zinit wait'1' lucid light-mode for lukechilds/zsh-better-npm-completion
zinit wait'1' atclone'./zplug.zsh' lucid for g-plane/zsh-yarn-autocompletions

if [ ! -x "$(command -v dircolors)" ]; then
  alias dircolors=gdircolors
fi


# add LOTS of file type colors
# zinit wait'1' atclone"dircolors -b LS_COLORS > clrs.zsh" \
#     atpull'%atclone' pick"clrs.zsh" nocompile'!' \
#     atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"' \
#     lucid light-mode for trapd00r/LS_COLORS

if [ -x "$(command -v fdfind)" ]; then
  # alternate name used on ubuntu/debian
  export FD=fdfind
else
  export FD=fd
fi

if [ -x "$(command -v zoxide)" ]; then
  export _ZO_EXCLUDE_DIRS=$HOME
  zinit wait'0' lucid as'null' atinit'unalias zi;eval "$(zoxide init zsh --hook prompt)" && alias c=__zoxide_zi zi=zinit' light-mode for zdharma-continuum/null
fi

zinit wait'1' lucid light-mode for zpm-zsh/ls
zinit wait'1' lucid light-mode for zpm-zsh/autoenv
zinit wait'1' lucid light-mode for zpm-zsh/ssh

autoload compinit
compinit

export FZF_DEFAULT_COMMAND="$FD --type file"
export FZF_DEFAULT_OPTS="--ansi --select-1 --height 40% --reverse --tiebreak=begin --bind end:preview-down,home:preview-up,ctrl-a:select-all+accept \
 --color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9 --color=fg+:#f8f8f2,bg+:#44475a,hl+:#bd93f9 --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6 --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4"
export FZF_TMUX_OPTS="-d 70%"

export FZF_ALT_C_COMMAND='$FD --type directory'
export FZF_ALT_C_OPTS="--preview 'CLICOLOR_FORCE=1 ls -GF {} | head -200' --preview-window=right:20%"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
if [ -x "$(command -v bat)" ]; then
  export FZF_CTRL_T_OPTS="--preview 'bat --color always {} | head -120' --preview-window=right:33%"
fi

# history search has to be loaded aftr fzf, so that it overwrites ^R
if [[ -x $(command -v atuin) ]]; then
  zinit wait'1' lucid light-mode atinit"bindkey '^xr' history-search-multi-word" for zdharma-continuum/history-search-multi-word
  export ATUIN_NOBIND="true"
  zinit wait"1" lucid light-mode atinit"bindkey '^r' _atuin_search_widget" for ellie/atuin
else
  zinit wait'1' lucid for zdharma-continuum/history-search-multi-word
fi

zinit wait'1' lucid light-mode for "cedi/meaningful-error-codes"

zinit wait'1' lucid if'[[ -x "$(command -v fzf)" ]]' for wfxr/forgit
# gi for forgit_ignore was a confusing alias
forgit_ignore=forgig
# ctrl-d to drop stash with gss
export FORGIT_STASH_FZF_OPTS='--bind="ctrl-d:reload(git stash drop $(cut -d: -f1 <<<{}) 1>/dev/null && git stash list)"'

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -l --color=always --no-user --no-time --no-filesize --no-permissions --icons $realpath'
zstyle ':fzf-tab:complete:ls:*' fzf-preview '[ -f "$realpath" ] && bat --style=changes,rule,snip --color=always $realpath || exa -l --color=always --no-user --no-time --no-filesize --no-permissions --icons $realpath'
zstyle ':fzf-tab:complete:export:*' fzf-preview 'printenv $word'
zstyle ':fzf-tab:complete:ssh:*' fzf-preview 'ping -c1 $word'
zstyle ':fzf-tab:*' switch-group ',' '.'

# NOTE: fzf-tab needs to be loaded after compinit, 
# but before plugins which will wrap widgets,
# such as zsh-autosuggestions or fast-syntax-highlighting!!
zinit wait'1' lucid atclone'source fzf-tab.zsh && build-fzf-tab-module' \
  atpull'%atclone' for Aloxaf/fzf-tab


export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=244'

zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting

if [ -x "$(command -v gh)" ]; then
  eval "$(gh copilot alias -- zsh)"
fi

if [ -x "$(command -v starship)" ]; then
  eval "$(starship init zsh)"
fi

if [[ -f "$HOME/.aliases" ]]; then
  source "$HOME/.aliases"
fi

function weechat() {
  TERM=alacritty command weechat
}

export EDITOR=nvim

path=("$HOME/.tmux/plugins/tmuxifier/bin" $path)
eval "$(tmuxifier init -)"

export KEYID=0x06B3614378AFA59E

if [[ -d /run/user ]]; then
  gpgconf --create-socketdir
fi
if [[ -z "${SSH_TTY}" ]]; then
  export GPG_TTY="$(tty)"
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  gpgconf --launch gpg-agent > /dev/null 2>&1 
  gpg-connect-agent updatestartuptty /bye > /dev/null 2>&1
fi

export TMUXIFIER_LAYOUT_PATH="$HOME/.config/tmux-layouts"
export QSYS_ROOTDIR="$HOME/intelFPGA_lite/23.1std/quartus/sopc_builder/bin"

